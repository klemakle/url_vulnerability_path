using System;
using System.Collections.Generic;
using System.Drawing;
using System.Windows.Forms;
using Microsoft.VisualBasic.FileIO;
using System.Net.Http;
using System.Threading.Tasks;
using System.IO;
//using PdfSharp.Pdf;
//using PdfSharp.Drawing;
//using iText.IO.Font.Constants;
//using System.Xml.Linq;
/*
using iText.Kernel.Pdf;
using iText.Layout;
using iText.Layout.Element;
*/
namespace URLVulnerabilityChecker
{
    public partial class Form1 : Form
    {
        

        private static readonly HttpClient httpClient = new HttpClient
        {
            Timeout = TimeSpan.FromSeconds(10) // Set a reasonable timeout
        };

        private TextBox urlTextBox;
        private Button loadCsvButton;
        private Button analyzeButton;
        private Button rapportButton;
        private string filePath = "";
        private  List<string> vulnerabilitiesList = new List<string>();

        public Form1()
        {
            InitializeComponent();

            urlTextBox = new TextBox { Left = 20, Top = 20, Width = 400 };
            loadCsvButton = new Button { Text = "Load CSV", Left = 20, Top = 50, Width = 100 };
            analyzeButton = new Button { Text = "Analyze", Left = 130, Top = 50, Width = 100 };
            rapportButton = new Button { Text = "Generate Report", Left = 240, Top = 50, Width = 100 };
         
            loadCsvButton.Click += LoadCsvButtonClick;
            analyzeButton.Click += AnalyzeButton_Click;
            rapportButton.Click += GeneratePdfReport;

            Controls.Add(urlTextBox);
            Controls.Add(loadCsvButton);
            Controls.Add(analyzeButton);
            Controls.Add(rapportButton);

            Text = "URL Vulnerability Checker";
            Size = new Size(450, 150);
        }

        private void LoadCsvButtonClick(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = "CSV Files|*.csv";
            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                filePath = openFileDialog.FileName;
            }
        }

        private async void AnalyzeButton_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(filePath))
            {
                var words = ReadCsvFile(filePath);
                vulnerabilitiesList = await AnalyzeUrl(urlTextBox.Text, words);
                // Implement logic to display vulnerabilities or further process them
            }
            else
                MessageBox.Show("Please load wordlist");
        }

        private List<string> ReadCsvFile(string filePath)
        {
            var words = new List<string>();
            using (TextFieldParser parser = new TextFieldParser(filePath))
            {
                parser.TextFieldType = FieldType.Delimited;
                parser.SetDelimiters(",");
                while (!parser.EndOfData)
                {
                    string[] fields = parser.ReadFields();
                    words.AddRange(fields);
                }
            }
            return words;
        }
       
            public static void GenerateTextRepor1(string outputFilePath, List<string> vulnerabilities)
            {
                // Créez un fichier texte et écrivez le contenu
                using (StreamWriter writer = new StreamWriter(outputFilePath))
                {
                    writer.WriteLine("Rapport de Vulnérabilités\n");

                    if (vulnerabilities.Count > 0)
                    {
                        writer.WriteLine("Liste des Vulnérabilités :\n");
                        foreach (var vulnerability in vulnerabilities)
                        {
                            writer.WriteLine("- " + vulnerability);
                        }
                    }
                    else
                    {
                        writer.WriteLine("Aucune vulnérabilité n'a été trouvée.");
                    }

                    MessageBox.Show("Le rapport texte a été généré avec succès : " + outputFilePath);
                }
            }



        public void GeneratePdfReport(object sender, EventArgs e)
        {
            string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);

            // Combinez le chemin du bureau avec le nom du fichier
            string outputFilePath = Path.Combine(desktopPath, "rappirt.txt");
            GenerateTextRepor1(outputFilePath, vulnerabilitiesList);
        }
   
      
        public static async Task<List<string>> AnalyzeUrl(string url, List<string> words)
        {
            var vulnerabilities = new List<string>();
            string test = "";

            foreach (var word in words)
            {
               // test =  test +" %% " +word;
                try
                {
                    string testUrl = $"{url}/{word}";
                    using (var response = await httpClient.GetAsync(testUrl))
                    {
                        if (response.IsSuccessStatusCode)
                        {
                            vulnerabilities.Add($"Route found: {testUrl}");
                            MessageBox.Show(testUrl, vulnerabilities.Count.ToString());
                        }
                    }
                }
                catch (HttpRequestException e)
                {
                    vulnerabilities.Add($"HTTP request error: {e.Message}");
                }
                catch (Exception e)
                {
                    vulnerabilities.Add($"General error: {e.Message}");
                }
            }
           // MessageBox.Show(test);
            return vulnerabilities;
        }
    }
}